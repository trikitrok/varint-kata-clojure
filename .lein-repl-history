(reduce * (repeat 8 2))
(reduce * (repeat 7 2))
(Long/toBinaryString 128)
(Long/toBinaryString 300)
(reverse (Long/toBinaryString 300))
(partition-all 7 7 (reverse (Long/toBinaryString 300)))
(defn pad-to-seven [bin-num]
  (concat (repeat (- 7 (count bin-num)) "0")
          bin-num))
(map #(apply str %) (partition-all 7 7 (reverse (Long/toBinaryString 300))))
(map pad-to-seven (map #(apply str %) (partition-all 7 7 (reverse (Long/toBinaryString 300)))))
(->> 300 Long/toBinaryString reverse (partition-all 7 7) (map #(apply str %)) (map pad-to-seven))
(->> 300 Long/toBinaryString reverse (partition-all 7 7) (map #(apply str %)) (map pad-to-seven) (map #(apply str %)))
(->> 300 Long/toBinaryString reverse (partition-all 7 7) (map #(apply str %)))
(->> 300 Long/toBinaryString)
(->> 300 Long/toBinaryString  (partition-all 7 7))
(->> 300 Long/toBinaryString  reverse)
(->> 300 Long/toBinaryString  reverse  (partition-all 7 7))
(->> 300 Long/toBinaryString  reverse  (partition-all 7 7) reverse)
(->> 300 Long/toBinaryString  reverse  (partition-all 7 7) (map reverse))
(->> 300 Long/toBinaryString  reverse  (partition-all 7 7) (map reverse) (map pad-to-seven))
(->> 300 Long/toBinaryString  reverse  (partition-all 7 7) (map reverse) (map pad-to-seven) (map #(apply str)))
(->> 300 Long/toBinaryString  reverse  (partition-all 7 7) (map reverse) (map pad-to-seven))
(->> 300 Long/toBinaryString  reverse  (partition-all 7 7) (map reverse) (map pad-to-seven) (map #(apply str)))
(->> 300 Long/toBinaryString  reverse  (partition-all 7 7) (map reverse) (map pad-to-seven) (map #(apply str %)))
(->> 300 Long/toBinaryString  reverse  (partition-all 7 7) (map reverse) (map pad-to-seven) (map #(apply str %))
(map #(cons "1") (butlast '("0101100" "0000010")))
(map #(cons "1" %) (butlast '("0101100" "0000010")))
(map #(cons "0" %) (last '("0101100" "0000010")))
(cons "0" (last '("0101100" "0000010")))
(defn add-msbs [bytes] (concat (map #(cons "1" %) (butlast bytes)) (cons "0" (last bytes)))))
(defn add-msbs [bytes] (concat (map #(cons "1" %) (butlast bytes)) (cons "0" (last bytes))))))
(defn add-msbs [bytes] (concat (map #(cons "1" %) (butlast bytes)) (cons "0" (last by
)
(map #(cons "1") (butlast '("0101100" "0000010")))
(map #(cons "1" %) (butlast '("0101100" "0000010")))
(cons "0" (last '("0101100" "0000010")))
(concat (map #(cons "1" %) (butlast '("0101100" "0000010"))) (cons "0" (last '("0101100" "0000010"))) )
(flatten (concat (map #(cons "1" %) (butlast '("0101100" "0000010"))) (cons "0" (last '("0101100" "0000010"))) ))
(apply str (flatten (concat (map #(cons "1" %) (butlast '("0101100" "0000010"))) (cons "0" (last '("0101100" "0000010"))) )))
(defn apply-msn [bytes]
  (flatten (concat (map #(cons "1" %) (butlast bytes))
                   (cons "0" (last bytes)) )))
(defn add-msn [bytes]
  (flatten (concat (map #(cons "1" %) (butlast bytes))
                   (cons "0" (last bytes)) )))
(add-msn '("0101100" "0000010"))
(add-msn '("0000010"))
(->> "1010110000000010" (partition-all 8 8))
(->> "1010110000000010" (partition-all 8 8) (map rest))
(->> "1010110000000010" (partition-all 8 8) (map rest) reverse)
(->> "1010110000000010" (partition-all 8 8) (map rest) reverse flaten)
(->> "1010110000000010" (partition-all 8 8) (map rest) reverse flatten)
(->> "1010110000000010" (partition-all 8 8) (map rest) reverse flatten (map #(Integer/parseInt %))
(->> "1010110000000010" (partition-all 8 8) (map rest) reverse flatten (map #(Integer/parseInt %)))
(->> "1010110000000010" (partition-all 8 8) (map rest) reverse flatten (map #(Integer/parseInt (str %))))
(->> "1010110000000010" (partition-all 8 8) (map rest) reverse flatten (map #(Integer/parseInt (str %))) 
    reverse (map-indexed #(vector %1 %2)))
(defn decode [var-int]
  (->> var-int 
       (partition-all 8 8) 
       (map rest) 
       reverse flatten 
       (map #(Integer/parseInt (str %)))
       reverse 
       (map-indexed #((* %2 (reduce * (repeat 2 %1)))))
       (reduce +)))
(decode  "1010110000000010" )
(defn decode [var-int]
  (->> var-int
       (partition-all 8 8)
       (map rest)
       reverse flatten
       (map #(Integer/parseInt (str %)))
       reverse
       (map-indexed #((* %2 (reduce * (repeat %1 2)))))
       (reduce +)))
(decode  "1010110000000010" )
(defn decode [var-int]
  (->> var-int
       (partition-all 8 8)
       (map rest)
       reverse flatten
       (map #(Integer/parseInt (str %)))
       reverse
       (map-indexed #(* %2 (reduce * (repeat %1 2))))
       (reduce +)))
(decode  "1010110000000010" )
